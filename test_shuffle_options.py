#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
"""

import os
import sys
import json
import random
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_shuffle_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤...")
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π
    original_options = {
        "A": "–∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        "B": "–¥–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", 
        "C": "–±–ª—É–∑–∞",
        "D": "–ø–ª–∞—Ç—å–µ"
    }
    
    original_correct = "A"
    
    print(f"üî∏ –ò—Å—Ö–æ–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {original_options}")
    print(f"üî∏ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {original_correct} = '{original_options[original_correct]}'")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    def shuffle_options(options_dict, correct_key):
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        correct_value = options_dict[correct_key]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö
        all_values = list(options_dict.values())
        random.shuffle(all_values)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏
        new_options = {}
        for i, value in enumerate(all_values):
            key = chr(65 + i)  # A, B, C, D
            new_options[key] = value
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        new_correct_key = None
        for key, value in new_options.items():
            if value == correct_value:
                new_correct_key = key
                break
        
        return new_options, new_correct_key
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    for i in range(5):
        new_options, new_correct_key = shuffle_options(original_options, original_correct)
        
        print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ {i+1}:")
        print(f"   –ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {new_options}")
        print(f"   –ù–æ–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {new_correct_key} = '{new_options[new_correct_key]}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º
        if new_options[new_correct_key] == original_options[original_correct]:
            print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Å—Ç–∞–ª–∏—Å—å —Ç–µ–º–∏ –∂–µ, –Ω–æ –≤ —Ä–∞–∑–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        original_values = set(original_options.values())
        new_values = set(new_options.values())
        
        if original_values == new_values:
            print("   ‚úÖ –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞! –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å!")
            return False
    
    print("\nüéâ –¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_json_format():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç JSON –∫–∞–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON —Ñ–æ—Ä–º–∞—Ç...")
    
    # –ü—Ä–∏–º–µ—Ä –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ
    options_json = '{"A": "–∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", "B": "–¥–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", "C": "–±–ª—É–∑–∞", "D": "–ø–ª–∞—Ç—å–µ"}'
    correct_json = '"A"'
    
    print(f"üî∏ Options JSON: {options_json}")
    print(f"üî∏ Correct JSON: {correct_json}")
    
    # –ü–∞—Ä—Å–∏–º JSON
    options_dict = json.loads(options_json)
    correct_answer = json.loads(correct_json)
    
    print(f"üî∏ Parsed options: {options_dict}")
    print(f"üî∏ Parsed correct: {correct_answer}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if correct_answer in options_dict:
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç '{correct_answer}' –Ω–∞–π–¥–µ–Ω: '{options_dict[correct_answer]}'")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö!")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è...\n")
    
    success1 = test_shuffle_function()
    success2 = test_json_format()
    
    if success1 and success2:
        print("\nüéä –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚ú® –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
        sys.exit(1)
