#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
"""

import os
import sys
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models import Lesson, GlossaryItem, Material, Test, Question

def test_glossary_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    
    app = create_app()
    
    with app.app_context():
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É—Ä–æ–∫–∏
        lessons = Lesson.query.all()
        if not lessons:
            print("‚ùå –ù–µ—Ç —É—Ä–æ–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
            
        lesson = lessons[0]
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ä–æ–∫: {lesson.title}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª —Å–ª–æ–≤–∞—Ä—è
        glossary_material = Material.query.filter_by(lesson_id=lesson.id, type='glossary').first()
        
        if not glossary_material:
            print("üìö –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å–ª–æ–≤–∞—Ä—è...")
            glossary_material = Material(
                lesson_id=lesson.id,
                title=f"–¢–µ—Å—Ç–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É—Ä–æ–∫–∞: {lesson.title}",
                type='glossary',
                content="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            db.session.add(glossary_material)
            db.session.commit()
            print("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–ª–æ–≤–∞—Ä—è —Å–æ–∑–¥–∞–Ω")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª —Å–ª–æ–≤–∞—Ä—è: {glossary_material.title}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤–∞—Ä—è
        glossary_items = GlossaryItem.query.filter_by(material_id=glossary_material.id).all()
        
        if not glossary_items:
            print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤–∞—Ä—è...")
            
            test_terms = [
                {
                    'word': 'ayollar kiyimlari',
                    'definition_ru': '–∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞',
                    'definition_uz': "women's clothing"
                },
                {
                    'word': 'ayollar ko\'ylagi', 
                    'definition_ru': '–ø–ª–∞—Ç—å–µ',
                    'definition_uz': 'dress'
                },
                {
                    'word': 'bichim',
                    'definition_ru': '–∫—Ä–æ–π, —Ñ–æ—Ä–º–∞',
                    'definition_uz': 'cut, shape'
                },
                {
                    'word': 'bluzka',
                    'definition_ru': '–±–ª—É–∑–∞',
                    'definition_uz': 'blouse'
                },
                {
                    'word': 'bolalar kiyimlari',
                    'definition_ru': '–¥–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞',
                    'definition_uz': "children's clothing"
                }
            ]
            
            for term_data in test_terms:
                glossary_item = GlossaryItem(
                    material_id=glossary_material.id,
                    word=term_data['word'],
                    definition_ru=term_data['definition_ru'],
                    definition_uz=term_data['definition_uz']
                )
                db.session.add(glossary_item)
            
            db.session.commit()
            glossary_items = GlossaryItem.query.filter_by(material_id=glossary_material.id).all()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(glossary_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(glossary_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∞: —É–∑–±–µ–∫—Å–∫–∏–π ‚Üí —Ä—É—Å—Å–∫–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç
        test_title = f"Rus tili bo'yicha lug'at testi: {lesson.title}"
        new_test = Test(
            lesson_id=lesson.id,
            title=test_title,
            description=f'Avtomatik yaratilgan lug\'at testi: {lesson.title}'
        )
        db.session.add(new_test)
        db.session.flush()
        
        questions_created = 0
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        for item in glossary_items:
            if item.definition_ru:
                question = Question(
                    test_id=new_test.id,
                    text=f'Quyidagi atama uchun rus tilidagi tarjimani tanlang: "{item.word}"',
                    type='single_choice'
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
                wrong_options = []
                other_items = GlossaryItem.query.filter(
                    GlossaryItem.id != item.id,
                    GlossaryItem.definition_ru.isnot(None)
                ).limit(3).all()
                
                for other_item in other_items:
                    if other_item.definition_ru and other_item.definition_ru != item.definition_ru:
                        wrong_options.append(other_item.definition_ru)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                options = [item.definition_ru] + wrong_options[:3]
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∫–ª—é—á–∞–º–∏ A, B, C, D
                options_dict = {}
                correct_key = None
                for i, option in enumerate(options):
                    key = chr(65 + i)  # A, B, C, D
                    options_dict[key] = option
                    if option == item.definition_ru:
                        correct_key = key
                
                question.options = json.dumps(options_dict, ensure_ascii=False)
                question.correct_answer = json.dumps(correct_key)
                db.session.add(question)
                questions_created += 1
        
        db.session.commit()
        
        if questions_created > 0:
            print(f"‚úÖ –¢–µ—Å—Ç '{test_title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å {questions_created} –≤–æ–ø—Ä–æ—Å–∞–º–∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
            questions = Question.query.filter_by(test_id=new_test.id).limit(2).all()
            print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
            
            for i, q in enumerate(questions, 1):
                print(f"\n{i}. {q.text}")
                options = json.loads(q.options)
                correct = json.loads(q.correct_answer)
                
                for key, value in options.items():
                    marker = "‚úì" if key == correct else " "
                    print(f"   {key}) {value} {marker}")
            
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
            return False

if __name__ == "__main__":
    success = test_glossary_generation()
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
        sys.exit(1)
